---
title: "Getting started with R"
author: Reza Tashakkori
date: today
format: html
---

### Exercise 1 {#sec-1}

* Create a vector of the letters A, B and C.

```{r}
# Your answer in code
my_vec <- LETTERS[1:3]
my_vec
```
> Your answer as text



* Assign the vector to a variable `my_letters`
```{r}
# Your answer in code
my_letters <- c("R","e","z","a")
my_letters
```


* Check the what happens when you run `letters` (just this) on the command line.
```{r}
# Your answer in code
letters
```

> Your answer as text



* What happens when you concatenate two vectors? Add `c(my_letters , my_letters)`
```{r}
# Your answer in code
c(my_letters, my_letters)

```

> I think it just stick the second vector to end of the first vector



* Add the number 1 to letters. What happens to the type of the vector?
```{r}
# Your answer in code
Added_vec <- c(letters, 1)
Added_vec
```

> The type of number 1 transformed to CHARACTER



### Exercise 2


1. Create a vector `my_vec` with the numbers from 1 through 8.
2. Apply the operation `+2` to the vector/
3. Add the vector containing 1, 2, 3, 4 to `my_vec`. What do you observe?

```{r}
# Your answer in code
my_vec <- 1:8
new_vec <- my_vec + 2

new_vec

final_vec <- my_vec + c(1:4)

final_vec

```

> ???????????????


### Exercise 3

* Consider the R output of the matrix below:

```
 [,1] [,2]
 [1,]    4    1
 [2,]    9    5
 [3,]   10    7
```

1. What was one of the correct commands used to write this matrix?
2. Assign the matrix as `A`
3. Check the dimensions
4. Extract the element `5`
5. Add the vector `c(0,0,0)` as a new column and update `A`
6. Modify the element 4 to `0`
7. Compute the transpose of `A`

```{r}
# Your answer in code

# 1,2
A <- matrix(nrow = 3, ncol = 2, data = c(4,9,10,1,5,7))

A

# 3
dim(A)

# 4
A[2,2]

# 5
B <- cbind(A, c(0,0,0))
A <- B
A

# 6
A[1,1] <- 0
A

#7
t(A)
```


8. Are any values in `A` larger than 10? 
```{r}
any(A>10)
```

9. Are all values in `A` smaller than 10?
```{r}
# Your answer in code
all(A<=10)
```

### Exercise 4

1. Create a function that sums up two values even if provided as characters values

```{r}
# Your answer in code

Sum_func <- function(x,y){
  as.numeric(x) + as.numeric(y)
}

Sum_func("23","45")

```


### Exercise 5

1. Create a function that returns the mean, median and standard deviation.

```{r}
# Your answer in code

Statistic_Calculator_func <- function(x){
  
  cat("Mean, Median and STD would be respectively: ", mean(x),",", median(x),",", sd(x))
  
  #return_mean <- mean(x)
  #return_median <- median(x)
  #return_std <- sd(x)
}

Statistic_Calculator_func(c(3,4,5,6,7))

```


### Exercise 6
1. Create a pipe statement that counts the number of NAs in vector containing numbers, characters and missing values.
The output of `c('1' , "a", NA, "2", NA)` should be 2.

```{r}
# Your answer in code
x <- c(1,2,NA,"23", "34", NA, NA)

is.na(x) |> sum()


```


